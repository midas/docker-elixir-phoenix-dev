#!/usr/bin/env bash

current_dir="$(dirname "$0")"
#source $current_dir/shared/all

#die_on_sigint

USAGE="build --alpine-version=[ALPINE VERSION] --elixir-version=[ELIXIR VERSION] --erlang-version=[ERLANG VERSION] [--latest]"

#me=`basename $0`
latest=false
build=true
push=true
owner=midas

for i in "$@"
  do
  case $i in
    --alpine-version=*)
      alpine_version="${i#*=}"
      shift
      ;;
    --erlang-version=*)
      erlang_version="${i#*=}"
      shift
      ;;
    --elixir-version=*)
      elixir_version="${i#*=}"
      shift
      ;;
    --latest)
      latest=true
      shift
      ;;
    --no-build)
      build=false
      shift
      ;;
    --no-push)
      push=false
      shift
      ;;
    --help|-h)
      echo "Build a docker image suitable for Elixir Phoenix app development or building/releasing"
      echo ""
      echo Usage:
      echo -e "  $USAGE"
      exit
      ;;
      *)
      positional+=("$1")
      shift
      ;;
  esac
  done

tag=alp$alpine_version-erl$erlang_version-ex$elixir_version

image_name=elixir-phoenix-dev

timestamp=$(date +"%Y-%m-%d")

function announce(){
  echo -e "\033[0;36m===> $1\033[00m"
}

function announce_warn(){
  echo -e "\033[0;33m===> $1\033[00m"
}

function announce_error(){
  echo -e "\033[0;31m===> $1\033[00m"
}

function error(){
  echo -e "\033[0;31m$1\033[00m"
}

function success(){
  echo -e "\033[0;32m$1\033[00m"
}

function warn(){
  echo -e "\033[0;33m$1\033[00m"
}

function die(){
  echo -e "\033[0;31mFATAL: $1\033[00m"
  exit 1
}

function step(){
  echo -e "\033[0;35m=== $1\033[00m"
}

function separator() {
  echo ""
  echo "==============================================="
  echo ""
}


if $build; then
  announce "Building $image_name:$tag"
  step "Generating Dockerfile for $image_name:$tag"
  export REFRESHED_AT=$timestamp ALPINE_VERSION=$alpine_version ELIXIR_VERSION=$elixir_version ERLANG_VERSION=$erlang_version
  contents=`envsubst '${ALPINE_VERSION} ${ELIXIR_VERSION} ${ERLANG_VERSION} ${REFRESHED_AT}' < $current_dir/../Dockerfile_`
  rm -rf $current_dir/../Dockerfile
  echo "$contents" > $current_dir/../Dockerfile

  step "Executing Docker Build for $image_name:$tag"
  docker build -t midas/$image_name:$tag --build-arg ERLANG_VERSION=$erlang_version --build-arg ELIXIR_VERSION=$elixir_version -f Dockerfile .
fi

if $latest; then
  announce "Tagging image as latest"
  docker tag $owner/$image_name:$tag midas/$image_name:latest
fi

if $push; then
  announce "Pushing $image_name:$tag to Registry"
  docker push $owner/$image_name:$tag
  #if $latest; then
    #docker push $owner/$image_name:latest
  #fi
fi
