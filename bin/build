#!/usr/bin/env bash

current_dir="$(dirname "$0")"
source $current_dir/shared/all

die_on_sigint

USAGE="build --elixir-version=1.5.2 --erlang-version=20.1 --linux-flavor=centos --linux-version=7.7.1908 [--fips]  [--latest] [--no-push]"

#me=`basename $0`
build=true
cleanup=false
docker_file_ext=std
fips_mode=false
latest=false
owner=midas
push=true

for i in "$@"
  do
  case $i in
      --cleanup)
        cleanup=true
        shift
        ;;
      --erlang-version=*)
			erlang_version="${i#*=}"
      shift
      ;;
      --elixir-version=*)
			elixir_version="${i#*=}"
      shift
      ;;
      --fips)
        fips_mode=true
        docker_file_ext=fips
        shift
        ;;
      --latest)
      latest=true
      shift
      ;;
      --linux-flavor=*)
			linux_flavor="${i#*=}"
      shift
      ;;
      --linux-version=*)
        linux_version="${i#*=}"
        shift
        ;;
      --no-build)
      build=false
      shift
      ;;
      --no-push)
      push=false
      shift
      ;;
      --help|-h)
      echo "Build a docker image suitable for Elixir Phoenix app development or building/releasing"
      echo ""
      echo Usage:
      echo -e "  $USAGE"
      exit
      ;;
      *)
      positional+=("$1")
      shift
      ;;
  esac
done

ensure_param "linux_flavor" $linux_flavor
ensure_param "linux_version" $linux_version

if $fips_mode; then
  tag=$linux_flavor$linux_version-erl-fips$erlang_version-ex$elixir_version
else
  tag=$linux_flavor$linux_version-erl$erlang_version-ex$elixir_version
fi

echo $tag
image_name=elixir-phoenix-dev
from=$linux_flavor:$linux_version

if $build; then
  announce "Building $image_name:$tag"
  (
    cd $linux_flavor &&
    rm -f Dockerfile &&
    export FROM=$from ERLANG_VERSION=$erlang_version ELIXIR_VERSION=$elixir_version &&
    envsubst '${FROM} ${ERLANG_VERSION} ${ELIXIR_VERSION}' < Dockerfile.temp.$docker_file_ext > Dockerfile &&
    #docker build --progress=plain --no-cache -t midas/$image_name:$tag -f Dockerfile .
    docker build --progress=plain -t midas/$image_name:$tag -f Dockerfile .
    #docker build -t midas/$image_name:$tag -f Dockerfile .
  )
fi

if $latest; then
  announce "Tagging image as latest"
  docker tag $owner/$image_name:$tag midas/$image_name:latest
fi

if $push; then
  announce "Pushing $image_name:$tag to Registry"
  docker push $owner/$image_name:$tag
  if $latest; then
    docker push $owner/$image_name:latest
  fi
fi

if $cleanup; then
  announce "Removing image $image_name:$tag"
  docker rmi $owner/$image_name:$tag
  docker rmi -f $(docker images -q -f dangling=true)
fi
